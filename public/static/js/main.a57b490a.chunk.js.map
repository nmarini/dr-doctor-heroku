{"version":3,"sources":["actions/currentUser.js","components/UserCard.js","components/DoctorCard.js","components/Doctor.js","components/DoctorList.js","containers/UserProfile.js","containers/DoctorSearch.js","containers/HomePage.js","components/Login.js","actions/loginForm.js","components/Logout.js","components/Signup.js","components/NavBar.js","App.js","actions/doctors.js","reducers/doctors.js","reducers/currentUser.js","reducers/loginForm.js","store.js","index.js"],"names":["setCurrentUser","user","type","clearCurrentUser","getCurrentUser","dispatch","fetch","credentials","method","headers","then","res","json","error","console","log","connect","currentUser","doctorCount","name","DoctorCard","doctor","note","className","profile","last_name","title","src","image_url","alt","bio","specialties","map","specialty","index","key","description","practices","practice","accepts_new_patients","visit_address","city","toUpperCase","state","Doctor","props","createDoctor","event","preventDefault","doctorInfo","uid","user_note","currentNote","user_id","id","setState","userNote","justSaved","body","JSON","stringify","doc","updateDoctor","handleChange","target","value","updateForm","onSubmit","placeholder","onChange","createForm","ownsDoctor","doctors","find","this","Component","DoctorList","listDoctors","onClick","handleClick","listUserDoctors","handleDelete","parseInt","updatedDocs","userDocs","filter","doctorUid","selectedDoctor","userDoctors","allDoctors","UserProfile","handleOnSubmit","userInfo","email","password","status","alert","exposeForm","handleOnChange","showForm","userDoc","count","forEach","to","DoctorSearch","specialtyDoctors","alphabetizeDocs","spec","includes","searchType","namedDoctors","toLowerCase","startsWith","lastName","dr","sort","a","b","sortBySpecialty","push","Set","handleSortClick","handleSortSubmit","chosen","chosenDocs","handleNameSubmit","specialtyForm","lastNameForm","HomePage","loginForm","clearLoginForm","updateLoginForm","formData","login","updatedFormInfo","logout","Signup","signup","App","getDoctors","exact","path","component","render","length","resource_url","process","errors","addDoctors","data","doctorsReducer","action","currentUserReducer","initialState","updateLoginFormReducer","reducer","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","require","config","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a57b490a.chunk.js","sourcesContent":["// synchronous action creators\nexport const setCurrentUser = user => {\n    return {\n        type: \"SET_CURRENT_USER\",\n        user\n    }\n\n};\n\nexport const clearCurrentUser = () => {\n    return {\n        type: \"CLEAR_CURRENT_USER\"\n    }\n}\n\n// asynchronous action creators\nexport const login = credentials => {\n    return dispatch => {\n        // return fetch(\"http://localhost:3000/api/v1/login\", {\n            return fetch(\"/api/v1/login\", {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials) \n        }).then(res => res.json())\n            .then( user => {\n                    if (user.error) {\n                        alert(user.error)\n                    } else {\n                        dispatch(setCurrentUser(user))\n                    }\n                }\n            )\n    }\n}\n\nexport const signup = credentials => {\n    return dispatch => {\n        const userInfo = {\n            user: credentials\n        }\n        // return fetch(\"http://localhost:3000/api/v1/signup\", {\n            return fetch(\"/api/v1/signup\", {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(userInfo) \n        }).then(res => res.json())\n            .then( user => {\n                    if (user.error) {\n                        alert(user.error)\n                    } else {\n                        dispatch(setCurrentUser(user))\n                    }\n                }\n            )\n    }\n}\n\nexport const logout = () => {\n    return (dispatch) => {\n        dispatch(clearCurrentUser());\n        // return fetch(\"http://localhost:3000/api/v1/logout\", {\n            return fetch(\"/api/v1/logout\", {\n            credentials: \"include\",\n            method: \"DELETE\"\n\n        })\n    }\n}\n\nexport const getCurrentUser = () => {\n    return dispatch => { \n        // return fetch(\"http://localhost:3000/api/v1/get_current_user\", {\n            return fetch(\"/api/v1/get_current_user\", {\n            credentials: \"include\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json())\n            .then( user => {\n                    if (user.error) {\n                        console.log(\"No one is logged in\")\n                    } else {\n                        dispatch(setCurrentUser(user))\n                    }\n                }\n            )\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst UserCard = ({currentUser, doctorCount}) => {\n\n    return (\n        <div>\n            {doctorCount !== 0 ? \n                <p>{currentUser.name}, you have {doctorCount} Doctor{doctorCount > 1 ? 's in your list.': ' in your list.'}</p>\n            : \n                null}\n        </div>\n    )\n}\n\nconst mapStateToProps = ({currentUser}) => {\n    return {\n        currentUser\n    }\n}\n\nexport default connect(mapStateToProps)(UserCard); ","import React from 'react';\n\nconst DoctorCard = ({doctor, note}) => {\n\n    const getSpecialties = () => (\n        doctor.specialties.map((specialty, index) => (\n            <div key={index}><li>{specialty.name}: {specialty.description}</li><br/></div>\n        ))\n    )\n\n    const getPractices = () => (\n        doctor.practices.map((practice, index) => \n            <div key={index}>\n                <li>\n                    {practice.name}\n                    <div className=\"accepting-patients\">{practice.accepts_new_patients ? \"Accepting New Patients\" : \"NOT Accepting New Patients\"}</div>\n                    City/State: {practice.visit_address.city.toUpperCase()}/{practice.visit_address.state.toUpperCase()}\n                </li>\n            <br/>\n            </div>\n        )\n    )\n\n    return (\n        <div>\n            <h1 className=\"component-title\">Dr. {doctor.profile.last_name}</h1>\n            <h5 className=\"component-title\">Title: {doctor.profile.title}</h5>\n            <img src={doctor.profile.image_url} alt=\"profile_picture\"/>\n            <div className=\"DoctorCardProfile\">\n            <p className=\"italic-p\">\n                {doctor.profile.bio}\n            </p>\n                \n            </div> \n            <div className=\"row\">\n                <div className=\"column\">\n                <h3>Specialties:</h3>\n                {getSpecialties()}\n                </div>\n                <div className=\"column\">\n                <h3>Practices:</h3>\n                {getPractices()}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DoctorCard; ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport DoctorCard from './DoctorCard';\nimport { getCurrentUser } from '../actions/currentUser';\n\nclass Doctor extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            userNote: this.props.doctor.user_note ? this.props.doctor.user_note : null,\n            currentNote: '',\n            justSaved: false,\n            id: this.props.doctor.id || null\n        }\n    }\n\n    componentDidMount() {\n        this.props.getCurrentUser();\n    }\n\n    createDoctor = (event) => {\n        event.preventDefault();\n            let doctorInfo = {\n                last_name: this.props.doctor.profile.last_name,\n                uid: this.props.doctor.uid,\n                user_note: this.state.currentNote,\n                user_id: this.props.currentUser.id\n            }\n\n            this.setState({userNote: this.state.currentNote, currentNote: '', justSaved: true})\n            return fetch(\"http://localhost:3000/api/v1/doctors\", {\n                    credentials: \"include\",\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(doctorInfo) \n            }).then(res => res.json()).then(doc => this.setState({id: doc.id}))\n    }\n\n    updateDoctor = (event) => {\n        event.preventDefault();\n        let doctorInfo = {\n            last_name: this.props.doctor.profile.last_name,\n            uid: this.props.doctor.uid,\n            user_note: this.state.currentNote\n        }\n\n        this.setState({userNote: this.state.currentNote, currentNote: ''})\n        return fetch(`http://localhost:3000/api/v1/doctors/${this.state.id}`, {\n                credentials: \"include\",\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(doctorInfo) \n        })\n    }\n\n\n    handleChange = (event) => {\n        this.setState({\n            currentNote: event.target.value\n        })\n    }\n\n    updateForm = () => (\n        <form onSubmit={this.updateDoctor} >\n                <label>\n                    Update Note:\n                    <input \n                        type=\"text\"\n                        className=\"round-textbox\"\n                        name=\"user_note\"\n                        placeholder=\"Add Note (optional)\"\n                        value={this.state.currentNote }\n                        onChange={this.handleChange}\n                    />\n                </label>\n            \n            <input className=\"edit-button\" type=\"submit\" value=\"Update Profile\" /> \n\n            </form> \n    )\n\n    createForm = () => (\n        <form onSubmit={this.createDoctor} >\n                <label>\n                    Create Note:\n                    <input \n                        type=\"text\"\n                        className=\"round-textbox\"\n                        name=\"user_note\"\n                        placeholder=\"Add Note (optional)\"\n                        value={this.state.currentNote}\n                        onChange={this.handleChange}\n                    />\n                </label>\n            \n            <input className=\"save-button\" type=\"submit\" value=\"Save Profile\" /> \n\n            </form> \n    )\n\n    ownsDoctor = (doctor) => {\n         \n        let result = this.props.currentUser.doctors.find(doc => doctor.uid === doc.uid)\n        return result ? true : false\n    }\n\n    render() {\n\n        return (\n\n            <div>\n\n                <DoctorCard key={this.props.doctor.uid} doctor={this.props.doctor} />\n                {this.state.userNote && this.ownsDoctor(this.props.doctor) ?\n                <div><h5 className=\"underlined\">Note:</h5> <p className=\"text-color\">{this.state.userNote}</p></div>\n                :\n                null}\n                \n                {this.state.justSaved ?\n                    \n                        <p className=\"success\">Saved to profile!</p>\n                        \n                : \n                    null}\n                       \n                            {this.state.justSaved && this.state.userNote ?\n                                <div>\n                                    <label>\n                                    <h5 className=\"underlined\">Note:</h5> \n                                    <p className=\"text-color\">{this.state.userNote}</p>\n                                    </label>\n                                </div>\n                   \n                            :\n                                null}    \n            \n                {this.ownsDoctor(this.props.doctor) || this.state.justSaved ? \n                    this.updateForm() \n                : \n                    this.createForm()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({currentUser}) => {\n    return {\n        currentUser\n    }\n}\n\nexport default connect(mapStateToProps, {getCurrentUser})(Doctor);  ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Doctor from '../components/Doctor';\nimport { getCurrentUser } from '../actions/currentUser';\n\nclass DoctorList extends Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedDoctor: false,\n            userDocs: this.props.userDoctors\n        }\n    }\n\n    componentDidMount() {\n        this.props.getCurrentUser();\n    }\n\n    listDoctors = (doctors) => (\n        doctors.map(doctor => \n            <div className=\"underlined\" key={doctor.uid}><h6>Dr. {doctor.profile.last_name}</h6><p><button className=\"button\" value={doctor.uid} onClick={this.handleClick}>give me the news!</button></p></div>\n        )\n    )\n\n    listUserDoctors = (doctors) => (\n        doctors.map(doctor => \n            <div className=\"underlined\" key={doctor.uid}><h6>Dr. {doctor.profile.last_name}</h6><p><button className=\"button\" value={doctor.uid} onClick={this.handleClick}>give me the news!</button><button className=\"warning-button\" value={doctor.id} onClick={this.handleDelete}>remove</button></p></div>\n        )\n    )\n\n    handleDelete = (event) => {\n        const id = parseInt(event.target.value)\n        const updatedDocs = this.state.userDocs.filter(doc => (\n                doc.id !== id\n            ))\n        this.setState({\n            userDocs: updatedDocs\n        })\n        fetch(`http://localhost:3000/api/v1/doctors/${id}`, {\n            credentials: \"include\",\n            method: \"DELETE\"\n        }).then(this.props.getCurrentUser)        \n    }\n\n    handleClick = event => {\n        let doctorUid = event.target.value;\n        let doctor = this.props.doctors.find(doctor => doctorUid === doctor.uid )\n        this.setState({\n            selectedDoctor: doctor\n        })\n        \n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"column\">\n                    <div className=\"doctorContainerList\">\n                        {this.props.userDoctors ? \n                            this.listUserDoctors(this.state.userDocs)\n                        : \n                            this.listDoctors(this.props.allDoctors)}\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"doctorContainerCard\">\n                        {this.state.selectedDoctor ? <Doctor key={this.state.selectedDoctor.uid} note={this.state.selectedDoctor.user_note} doctor={this.state.selectedDoctor}/> : <p className=\"underlined\">Selected Doctor will Display here</p>}\n                    </div>\n                </div>              \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({currentUser, doctors}) => {\n    return {\n        currentUser,\n        doctors\n    }\n}\n\nexport default connect(mapStateToProps, {getCurrentUser})(DoctorList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UserCard from '../components/UserCard';\nimport DoctorList from '../components/DoctorList';\nimport { getCurrentUser, clearCurrentUser } from '../actions/currentUser';\nimport { NavLink } from 'react-router-dom';\n\nclass UserProfile extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: this.props.currentUser.name,\n            email: this.props.currentUser.email,\n            password: '',\n            exposeForm: false\n        }\n    }\n\n    componentDidMount() {\n        this.props.getCurrentUser();\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault();\n        const userInfo = {\n            user: {\n                name: this.state.name,\n                email: this.state.email,\n                password: this.state.password\n\n            }\n        }\n\n        fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n                credentials: \"include\",\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(userInfo) \n            }).then( res => {\n                    if (res.status !== 200) {\n                        alert('Please complete entire form!')\n                    } else {\n                        this.props.getCurrentUser()\n                    }\n                }\n        )\n        this.setState({exposeForm: !this.state.exposeForm})\n    }\n\n    handleDelete = () => {\n        this.props.clearCurrentUser();\n        fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n            credentials: \"include\",\n            method: \"DELETE\"\n\n        })\n    }\n\n    handleOnChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    showForm = () => {\n        this.setState({\n            exposeForm: !this.state.exposeForm\n        })\n    }\n\n    updateForm = () => (\n        <form onSubmit={this.handleOnSubmit}>\n            <input \n                type=\"text\"\n                className=\"round-textbox\"\n                name=\"name\"\n                placeholder=\"Name\"\n                value={this.state.name}\n                onChange={this.handleOnChange}\n            />\n            \n            <input \n                type=\"text\"\n                className=\"round-textbox\"\n                name=\"email\"\n                placeholder=\"Email\"\n                value={this.state.email}\n                onChange={this.handleOnChange}\n            />\n            \n            <input \n                type=\"password\"\n                className=\"round-textbox\"\n                name=\"password\"\n                placeholder=\"Password\"\n                value={this.state.password}\n                onChange={this.handleOnChange}\n            />\n            \n            <input \n                type=\"submit\"\n                className=\"edit-button\"\n                value=\"Update Account\"            \n            />\n\n        </form>\n    )\n\n    userDoctors = () => (\n        this.props.currentUser.doctors.map(doctor => {\n            \n            let userDoc = this.props.doctors.find(doc => (\n                doc.uid === doctor.uid\n            ))\n            userDoc.id = doctor.id \n            userDoc.user_note = doctor.user_note\n            return userDoc\n            \n        })\n\n    )\n\n    doctorCount = () => {\n        let count = 0;\n        this.props.currentUser.doctors.forEach(doc => count += 1)\n        return count \n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h5 className=\"component-title\">Profile Page</h5>\n                    <UserCard doctorCount={this.doctorCount()} />\n                <div>\n                    <button className=\"edit-button\" onClick={this.showForm}>{this.state.exposeForm ? \"Hide Edit Form\" : \"Show Edit Form\"}</button>\n                </div>\n                {this.state.exposeForm ? \n                    this.updateForm()\n                :\n                    null }\n                <div>\n                    <NavLink to=\"/\"><button className=\"warning-button\" onClick={this.handleDelete}>Delete Your Account</button></NavLink>\n                </div>\n                </div>\n            \n                \n                {this.props.doctors ? \n        \n                    <div>\n                        <h6 className=\"component-title\">Your saved Doctors:</h6>\n                            <DoctorList userDoctors={this.userDoctors()} />  \n                    </div>\n                :  \n                'still loading...'}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({currentUser, doctors}) => {\n    return {\n        currentUser,\n        doctors\n    }\n}\n\nexport default connect(mapStateToProps, {getCurrentUser, clearCurrentUser})(UserProfile); ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport DoctorList from '../components/DoctorList';\n\nclass DoctorSearch extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lastName: \"\",\n            searchType: \"DEFAULT\",\n            chosenDocs: false\n        }\n    }\n\n    specialtyDoctors = () => (\n        this.alphabetizeDocs().filter(doc => {\n            let specialties = doc.specialties.map(spec => spec.name)\n            if (specialties.includes(this.state.searchType)) \n            return doc\n        })\n    )\n\n    namedDoctors = () => (\n        this.alphabetizeDocs().filter(doc => doc.profile.last_name.toLowerCase().startsWith(this.state.lastName.toLowerCase()))\n    )\n\n    ownsDoctor = (doctor) => {\n         \n        let result = this.props.currentUser.doctors.find(doc => doctor.uid === doc.uid)\n        return result ? true : false\n    }\n    \n    allDoctors = () => (\n        this.props.doctors.map(doctor => {\n            if (this.ownsDoctor(doctor)) {\n                let doc = this.props.currentUser.doctors.find(dr => dr.uid === doctor.uid)\n                doctor.user_note = doc.user_note\n                doctor.id = doc.id\n                return doctor\n            } else {\n                return doctor\n            }\n        })\n    )\n\n    alphabetizeDocs = () => (\n\n       this.allDoctors().sort((a, b) => {\n            if (a.profile.last_name < b.profile.last_name) \n                return -1\n            if (a.profile.last_name > b.profile.last_name)\n                return 1\n            return 0\n        })\n    )\n\n    sortBySpecialty = () => {\n        let specialties = []\n        this.props.doctors.map(doc => {\n            doc.specialties.map(spec => {\n                specialties.push(spec.name)\n            })\n        }) \n\n        const uniqSpec = [...new Set(specialties)].sort()\n        return uniqSpec.map((spec, index) => <option key={index} name=\"searchType\" value={spec} onClick={this.handleSortClick}>{spec}</option>)      \n    }\n\n    handleSortSubmit = (event) => {\n        event.preventDefault();\n        \n        const chosen = this.state.searchType === 'DEFAULT' ? this.alphabetizeDocs() : this.specialtyDoctors()\n\n        this.setState({\n            chosenDocs: chosen,\n            lastName: ''\n        })\n\n    }\n\n    handleNameSubmit = (event) => {\n        event.preventDefault();\n\n        this.setState({\n            chosenDocs: this.namedDoctors(),\n            lastName: '',\n            searchType: ''\n        })\n    }\n\n    handleOnChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    specialtyForm = () => (\n        <form onSubmit={this.handleSortSubmit}>\n                    <label> \n                            Sort by Specialty:\n                            \n                            <select name=\"searchType\" className=\"button\" value={this.state.searchType} onChange={this.handleOnChange}>\n                            \n                                <option key={\"00\"} value={\"DEFAULT\"} >All Doctors</option>\n                                {this.sortBySpecialty()}\n\n                            </select>\n                        </label>\n                        <input \n                            type=\"submit\"\n                            className=\"button\"\n                            value=\"sort!\"\n\n                        />\n                    </form>\n    )\n\n    lastNameForm = () => (\n    \n        <form onSubmit={this.handleNameSubmit}>\n                <label>\n                    Search by Last Name:\n                    <input \n                        type=\"text\"  \n                        className=\"round-textbox\"\n                        onChange={this.handleOnChange}\n                        name=\"lastName\"\n                        value={this.state.lastName}\n                    />\n                </label>\n                    <input \n                        type=\"submit\"\n                        className=\"button\"\n                        value=\"search\"\n                    />                \n                </form>\n\n    )\n\n    render() {\n        return (\n            <div>\n                <h5 className=\"component-title\">Doctor List</h5>\n\n                {this.props.doctors !== null ?\n                    <div>\n                        {this.lastNameForm()}\n                        {this.specialtyForm()}\n                        </div>\n                :\n                    null}\n                \n                <div>\n\n                </div>\n                {this.props.doctors !== null && this.props.currentUser !== null ?\n                    this.state.chosenDocs ? \n                        <DoctorList key={this.state.chosenDocs} allDoctors={this.state.chosenDocs} />\n                    :\n                        <DoctorList key={this.state.chosenDocs} allDoctors={this.alphabetizeDocs()} />\n                :\n                    'still loading...'}\n              \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({currentUser, doctors}) => {\n    return {\n        currentUser,\n        doctors\n    }\n}\n\nexport default connect(mapStateToProps)(DoctorSearch); ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass HomePage extends Component {\n\n    render() {\n        return (\n            <div>\n                {this.props.currentUser ? \n                    <div className=\"text-color\">\n                        <h5 className=\"component-title\">\n                            Home\n                        </h5>\n                            <p>\n                                Please use the navigation bar to checkout Doctors, your Profile, or to Log Out\n                            </p>\n                            <p className=\"italic-p\">\n                                <b>Dr. Doctor</b> contains a list of Doctors, from <b>Boston Massachusetts</b>, with varying backgrounds.\n                                <br/>\n                                Users are able to view Doctor information, and save Doctors to their User Profile with an optional note included to view at a later time.\n                                <br/>\n                                Users are able to search for Doctors by last name, specialty, or picking a Doctor from the complete list of Doctors.\n                            </p>\n                    </div> \n                : \n                    <p>Please Sign Up or Log In</p>}\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({currentUser}) => {\n    return {\n        currentUser\n    }\n}\n\nexport default connect(mapStateToProps)(HomePage); ","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateLoginForm, clearLoginForm } from  '../actions/loginForm.js'\nimport { login } from  '../actions/currentUser.js'\n\nconst Login = ({clearLoginForm, updateLoginForm, login, loginForm}) => {\n    \n    const handleChange = event => {\n        const {name, value } = event.target;\n        const updatedFormInfo = {\n            ...loginForm,\n            [name]: value\n        }\n        updateLoginForm(updatedFormInfo) \n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        login(loginForm);\n        clearLoginForm();\n    }\n\n    return (\n        <div>\n        Log In\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                className=\"round-textbox\"\n                placeholder=\"Email\"\n                onChange={handleChange}\n                name=\"email\"\n                value={loginForm.email}\n            />\n            <input \n                type=\"password\"\n                className=\"round-textbox\"\n                placeholder=\"Password\"\n                onChange={handleChange}\n                name=\"password\"\n                value={loginForm.password}\n            />\n            <input \n                type=\"submit\"\n                className=\"button\"\n                value=\"Log In\"\n            />\n        </form>\n        </div>\n\n    )\n}\n\nconst mapStateToProps = ({loginForm}) => {\n    return {\n        loginForm\n    }\n}\n\nexport default connect(mapStateToProps, { clearLoginForm, updateLoginForm, login })(Login);","export const updateLoginForm = (formData) => {\n    return {\n        type: \"UPDATE_LOGIN_FORM\",\n        formData\n    }\n}\n\nexport const clearLoginForm = () => {\n    return {\n        type: \"CLEAR_LOGIN_FORM\"\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { logout } from '../actions/currentUser.js';\nimport { NavLink } from 'react-router-dom';\n\nconst Logout = ({ logout }) => {\n    \n\n    return (\n\n        <NavLink to='/'><button className=\"nav-button\" onClick={logout}>Log Out</button></NavLink>\n    )\n}\n\nexport default connect(null, { logout })(Logout); ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signup } from  '../actions/currentUser.js';\n\nclass Signup extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            email: '',\n            name: '',\n            password: ''\n        }\n    } \n\n    handleOnChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleOnSubmit = event => {\n        event.preventDefault();\n        this.props.signup(this.state) \n    }\n\n    render() {\n        return (\n            <div>\n                Sign Up\n                <form onSubmit={this.handleOnSubmit}>\n                    <input \n                        type=\"text\"\n                        className=\"round-textbox\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        value={this.state.name}\n                        onChange={this.handleOnChange}\n                    />\n                   \n                    <input \n                        type=\"text\"\n                        className=\"round-textbox\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        value={this.state.email}\n                        onChange={this.handleOnChange}\n                    />\n                  \n                    <input \n                        type=\"password\"\n                        className=\"round-textbox\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        value={this.state.password}\n                        onChange={this.handleOnChange}\n                    />\n                   \n                    <input \n                        type=\"submit\"\n                        className=\"button\"\n                        value=\"Sign Up\"            \n                    />\n\n                </form>\n    \n            </div>\n        )\n    }\n}\n\nexport default connect(null, { signup })(Signup); ","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport Login from './Login.js';\nimport Logout from './Logout.js';\nimport Signup from './Signup.js';\n\n\n\nconst NavBar = ({currentUser}) => {\n\n    const loggedIn = () => {\n        return <div className=\"NavRow\">\n            <div className=\"NavColumn\"><NavLink to='/'><button className=\"nav-button\">Home Page</button></NavLink></div>\n            <div className=\"NavColumn\"><NavLink to='/userProfile'><button className=\"nav-button\" >User's Profile</button></NavLink></div>\n            <div className=\"NavColumn\"><NavLink to='/doctorList'><button className=\"nav-button\" >Doctor List</button></NavLink></div>\n            <div className=\"NavColumn\"><Logout/></div>\n        </div>\n    }\n\n        return (\n            <div className=\"NavBar\">\n                <div>\n                    { currentUser ? <strong>Welcome, {currentUser.name}! </strong> : null}\n                    <div>{ currentUser ? null : <div><Login/>-or-<Signup/></div>}</div>\n                </div>\n                {currentUser ? loggedIn() : \"\"}\n            </div>\n        )\n}\n\nconst mapStateToProps = ({currentUser}) => {\n    return {\n        currentUser\n    }\n}\n\nexport default connect(mapStateToProps)(NavBar); ","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentUser } from './actions/currentUser.js';\nimport { getDoctors } from './actions/doctors.js';\nimport UserProfile from './containers/UserProfile.js';\nimport DoctorSearch from './containers/DoctorSearch.js';\nimport HomePage from './containers/HomePage.js';\nimport NavBar from './components/NavBar.js';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.getCurrentUser();\n    this.props.getDoctors();\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"main-title\">\n            <h1>Dr. Doctor</h1>\n            <p className=\"italic-p\">Helping you find the doctor you need</p>\n          </div>\n            <NavBar />\n            {this.props.currentUser ? \n            <div>\n              <Route exact path='/' component={HomePage} />\n              <Route exact path='/userProfile' render={() => (<UserProfile key={this.props.currentUser.doctors.length}/>)} />\n              <Route exact path='/doctorList' component={DoctorSearch} />\n            </div>\n            :\n            <div>\n              <Route exact path='/' component={HomePage} />\n            </div>}\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = ({currentUser}) => {\n  return {\n    currentUser\n  }\n}\n\nexport default connect(mapStateToProps, { getCurrentUser, getDoctors })(App);\n","// synchronous action creators\nexport const addDoctors = doctors => {\n    return {\n        type: \"ADD_DOCTORS\",\n        doctors\n    }\n\n};\n\nexport const saveDoctor = (currentUser, doctor) => {\n    return {\n        type: \"SAVE_DOCTOR\",\n        doctor,\n        currentUser\n    }\n};\n\n// asynchronous action creators\nexport const getDoctors = () => {\n\n    let api_key = `${process.env.REACT_APP_API_KEY}`; \n    let resource_url = 'https://api.betterdoctor.com/2016-03-01/doctors?location=ma-boston&skip=2&limit=100&user_key=' + api_key;\n\n    return dispatch => {\n        return fetch(resource_url\n            , {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        }).then(res => res.json())\n            .then( doctors => {\n                    if (doctors.error) {\n                        alert(doctors.errors)\n                    } else {\n                        dispatch(addDoctors(doctors.data))\n                    }\n                }\n            )\n    }\n}\n\n\n\n","const doctorsReducer = (state = null, action) => {\n    switch (action.type) {\n        case 'ADD_DOCTORS':\n            return action.doctors\n        default:\n            return state \n    }\n}\n\nexport default doctorsReducer","const currentUserReducer = (state = null, action) => {\n    switch (action.type) {\n        case \"SET_CURRENT_USER\":\n            return action.user \n        case \"CLEAR_CURRENT_USER\":\n            return null\n        default:\n            return state\n    }\n}\n\nexport default currentUserReducer;","const initialState = {\n    email: \"\",\n    password: \"\"\n}\n\nconst updateLoginFormReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"UPDATE_LOGIN_FORM\":\n            return action.formData\n        case \"CLEAR_LOGIN_FORM\":\n            return initialState\n        default:          \n            return state\n    }\n\n}\n\nexport default updateLoginFormReducer;","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport doctorsReducer from './reducers/doctors.js';\nimport currentUserReducer from './reducers/currentUser.js';\nimport updateLoginFormReducer from './reducers/loginForm.js';\nimport thunk from 'redux-thunk';\n\nconst reducer = combineReducers({\n    doctors: doctorsReducer,\n    currentUser: currentUserReducer,\n    loginForm: updateLoginFormReducer\n})\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancer(applyMiddleware(thunk)))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nrequire('dotenv').config();\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n "],"sourceRoot":""}